// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationPractice.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Sign In", Description="\tIn order to access my account\r\n\tAs an application user\r\n\tI want to be able to Si" +
        "gn In in and Sign Out", SourceFile="Features\\Sign In.feature", SourceLine=0)]
    public partial class SignInFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sign In.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sign In", "\tIn order to access my account\r\n\tAs an application user\r\n\tI want to be able to Si" +
                    "gn In in and Sign Out", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line 7
 testRunner.Given("I\'m on Authentication page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void SignInWithCorrectEmailAdressAndPassword(string email, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LoginProperly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in with correct Email adress and Password", @__tags);
#line 10
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 11
 testRunner.When(string.Format("I enter email \'{0}\' and password \'{1}\'", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And("I click Sign In", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.Then("I should be logged into my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign in with correct Email adress and Password, darengibson@automationpractice.co" +
            "m", new string[] {
                "LoginProperly"}, SourceLine=17)]
        public virtual void SignInWithCorrectEmailAdressAndPassword_DarengibsonAutomationpractice_Com()
        {
#line 10
 this.SignInWithCorrectEmailAdressAndPassword("darengibson@automationpractice.com", "11111", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign in with correct Email adress and Password, gregorysmith@automationpractice.c" +
            "om", new string[] {
                "LoginProperly"}, SourceLine=17)]
        public virtual void SignInWithCorrectEmailAdressAndPassword_GregorysmithAutomationpractice_Com()
        {
#line 10
 this.SignInWithCorrectEmailAdressAndPassword("gregorysmith@automationpractice.com", "54321", ((string[])(null)));
#line hidden
        }
        
        public virtual void SignOutFromTheAccount(string email, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogOut"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign out from the account", @__tags);
#line 22
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 23
 testRunner.Given(string.Format("I am logged in with email \'{0}\' and password \'{1}\'", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("I click Sign out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I should be logged out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign out from the account, darengibson@automationpractice.com", new string[] {
                "LogOut"}, SourceLine=29)]
        public virtual void SignOutFromTheAccount_DarengibsonAutomationpractice_Com()
        {
#line 22
 this.SignOutFromTheAccount("darengibson@automationpractice.com", "11111", ((string[])(null)));
#line hidden
        }
        
        public virtual void SignInWithCorrectEmailAdressAndInvalidPassword(string email, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InvalidPassword"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in with correct Email adress and invalid Password", @__tags);
#line 33
 this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 34
 testRunner.When(string.Format("I enter email \'{0}\' and password \'{1}\'", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.And("I click Sign In", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.Then("I should see \"Authentication failed.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign in with correct Email adress and invalid Password, darengibson@automationpra" +
            "ctice.com", new string[] {
                "InvalidPassword"}, SourceLine=40)]
        public virtual void SignInWithCorrectEmailAdressAndInvalidPassword_DarengibsonAutomationpractice_Com()
        {
#line 33
 this.SignInWithCorrectEmailAdressAndInvalidPassword("darengibson@automationpractice.com", "111112", ((string[])(null)));
#line hidden
        }
        
        public virtual void SignInWithInvalidEmailAdressAndCorrectPassword(string email, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InvalidEmail"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in with invalid Email adress and correct Password", @__tags);
#line 44
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 45
 testRunner.When(string.Format("I enter email \'{0}\' and password \'{1}\'", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.And("I click Sign In", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("I should see \"Invalid email address.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign in with invalid Email adress and correct Password, darengibsonautomationprac" +
            "tice.com", new string[] {
                "InvalidEmail"}, SourceLine=51)]
        public virtual void SignInWithInvalidEmailAdressAndCorrectPassword_Darengibsonautomationpractice_Com()
        {
#line 44
this.SignInWithInvalidEmailAdressAndCorrectPassword("darengibsonautomationpractice.com", "11111", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sign in without enter any credentials", new string[] {
                "JustSignIn"}, SourceLine=56)]
        public virtual void SignInWithoutEnterAnyCredentials()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign in without enter any credentials", new string[] {
                        "JustSignIn"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line 58
 testRunner.When("I click Sign In", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("I should see \"An email address required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
