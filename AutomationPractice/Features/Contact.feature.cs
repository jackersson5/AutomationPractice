// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationPractice.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Contact", Description="\tIn order to contact with customer service\r\n\tAs an application user\r\n\tI want to s" +
        "end a message to them", SourceFile="Features\\Contact.feature", SourceLine=0)]
    public partial class ContactFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Contact.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Contact", "\tIn order to contact with customer service\r\n\tAs an application user\r\n\tI want to s" +
                    "end a message to them", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("I am on Contact us page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void SendingEmptyMessageWithValidEmailAdress(string email, string subjectHeading, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending empty message with valid email adress", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
  testRunner.When(string.Format("I enter email \'{0}\' and subjectHeading \'{1}\'", email, subjectHeading), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
  testRunner.And("I click Send", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.Then("Message validation \"The message cannot be blank.\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sending empty message with valid email adress, darengibson@automationpractice.com" +
            "", new string[] {
                "positive"}, SourceLine=18)]
        public virtual void SendingEmptyMessageWithValidEmailAdress_DarengibsonAutomationpractice_Com()
        {
#line 10
this.SendingEmptyMessageWithValidEmailAdress("darengibson@automationpractice.com", "Customer service", ((string[])(null)));
#line hidden
        }
        
        public virtual void SendingMessageWithInvalidEmptyEmailAdress(string email, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending message with invalid/empty email adress", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 24
testRunner.When(string.Format("I enter email \'{0}\' and message \'{1}\'", email, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
testRunner.And("I click Send", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.Then("Email adress validation \"Invalid email address.\" appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sending message with invalid/empty email adress, testgmail.com", SourceLine=30)]
        public virtual void SendingMessageWithInvalidEmptyEmailAdress_Testgmail_Com()
        {
#line 22
this.SendingMessageWithInvalidEmptyEmailAdress("testgmail.com", "test", ((string[])(null)));
#line hidden
        }
        
        public virtual void SendingMessageWithoutChooseSubjectHeading(string email, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending message without choose Subject Heading", exampleTags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 35
testRunner.When(string.Format("I enter email \'{0}\' and message \'{1}\'", email, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.And("I click Send", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
testRunner.Then("Subject heading validation \"Please select a subject from the list provided.\" appe" +
                    "ars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sending message without choose Subject Heading, darengibson@automationpractice.co" +
            "m", SourceLine=41)]
        public virtual void SendingMessageWithoutChooseSubjectHeading_DarengibsonAutomationpractice_Com()
        {
#line 33
this.SendingMessageWithoutChooseSubjectHeading("darengibson@automationpractice.com", "test", ((string[])(null)));
#line hidden
        }
        
        public virtual void SendingMessageWithValidRequiredCredentials(string email, string subjectHeading, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending message with valid required credentials", exampleTags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 47
testRunner.When(string.Format("I enter email, subjectHeading and message \'{0}\',\'{1}\', \'{2}\'", email, subjectHeading, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
testRunner.And("I click Send", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.Then("Successful message \"Your message has been successfully sent to our team.\" appears" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Sending message with valid required credentials, darengibson@automationpractice.c" +
            "om", SourceLine=53)]
        public virtual void SendingMessageWithValidRequiredCredentials_DarengibsonAutomationpractice_Com()
        {
#line 45
this.SendingMessageWithValidRequiredCredentials("darengibson@automationpractice.com", "Customer Service", "test", ((string[])(null)));
#line hidden
        }
        
        public virtual void AutocompletingEmailAdressFieldByEmailAdressFromLogin(string signInEmailAdress, string password, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Autocompleting email adress field by email adress from login", exampleTags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 58
testRunner.When(string.Format("I Sign In using \'{0}\' and \'{1}\'", signInEmailAdress, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
testRunner.And("I click Contact Us", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
testRunner.Then("The email adress field should be filled with email address from sign in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Autocompleting email adress field by email adress from login, darengibson@automat" +
            "ionpractice.com", SourceLine=64)]
        public virtual void AutocompletingEmailAdressFieldByEmailAdressFromLogin_DarengibsonAutomationpractice_Com()
        {
#line 56
this.AutocompletingEmailAdressFieldByEmailAdressFromLogin("darengibson@automationpractice.com", "11111", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
